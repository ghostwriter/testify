<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.26.1@d747f6500b38ac4f7dfc5edbcae6e4b637d7add0">
  <file src="src/Application/Application.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
      <code><![CDATA[new]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Application/ApplicationInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[run]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Application/FinderInterface.php">
    <UnusedClass>
      <code><![CDATA[FinderInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Application/PhpFileFinder.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Builder/TestBuilder.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->testMethodsResolver->resolve($namespaceClass)]]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code><![CDATA[$namespaces]]></code>
      <code><![CDATA[$tokens]]></code>
      <code><![CDATA[[new AttributeGenerator('CoversClass', [$class . '::class'])]]]></code>
    </InvalidArgument>
    <InvalidOperand>
      <code><![CDATA[$namespace]]></code>
    </InvalidOperand>
    <MixedArrayAccess>
      <code><![CDATA[$namespaceGenerator]]></code>
      <code><![CDATA[$testNamespace]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code><![CDATA[$namespaces[$namespace]]]></code>
      <code><![CDATA[[$testNamespace, $namespaceGenerator]]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[classLikes]]></code>
      <code><![CDATA[usesClass]]></code>
      <code><![CDATA[usesClass]]></code>
      <code><![CDATA[usesClass]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$testNamespace]]></code>
    </MixedOperand>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Command/CommandInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[name]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Command/CommandProviderInterface.php">
    <UnusedClass>
      <code><![CDATA[CommandProviderInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/CommandHandler/CommandHandlerProvider.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
      <code><![CDATA[add]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Container/Extension/ConfigExtension.php">
    <ImplementedReturnTypeMismatch>
      <code><![CDATA[ConfigInterface]]></code>
    </ImplementedReturnTypeMismatch>
    <LessSpecificReturnType>
      <code><![CDATA[string]]></code>
    </LessSpecificReturnType>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new RuntimeException('Failed to parse options');]]></code>
    </MissingThrowsDocblock>
    <MoreSpecificImplementedParamType>
      <code><![CDATA[$service]]></code>
    </MoreSpecificImplementedParamType>
    <NoValue>
      <code><![CDATA[$argument]]></code>
    </NoValue>
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$long]]></code>
    </PossiblyUndefinedIntArrayOffset>
    <TypeDoesNotContainType>
      <code><![CDATA[throw new ShouldNotHappenException(\sprintf(
                    'Invalid argument type: %s, expected 0, 1 or 2',
                    $argument,
                ))]]></code>
    </TypeDoesNotContainType>
    <UnusedMethod>
      <code><![CDATA[highlight]]></code>
    </UnusedMethod>
  </file>
  <file src="src/Container/Factory/SingleCommandApplicationFactory.php">
    <PossiblyNullArgument>
      <code><![CDATA[InstalledVersions::getPrettyVersion('ghostwriter/testify')]]></code>
    </PossiblyNullArgument>
  </file>
  <file src="src/Feature/ErrorHandler/ErrorHandler.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new ErrorException($message, 0, $severity, $file, $line);]]></code>
    </MissingThrowsDocblock>
  </file>
  <file src="src/Feature/ErrorHandler/ErrorHandlerMiddleware.php">
    <LessSpecificReturnType>
      <code><![CDATA[bool]]></code>
    </LessSpecificReturnType>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Feature/ExceptionHandler/ExceptionHandler.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Feature/ExceptionHandler/ExceptionHandlerMiddleware.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Feature/NotFound/CommandNotFoundHandler.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Feature/Testify/TestifyCommand.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function name(): string]]></code>
    </MissingOverrideAttribute>
    <MixedAssignment>
      <code><![CDATA[$dryRun]]></code>
      <code><![CDATA[$force]]></code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
    <UndefinedInterfaceMethod>
      <code><![CDATA[dryRun]]></code>
      <code><![CDATA[force]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Feature/Testify/TestifyCommandHandler.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/ClassLike/ClassGenerator.php">
    <LessSpecificReturnType>
      <code><![CDATA[string]]></code>
      <code><![CDATA[string]]></code>
      <code><![CDATA[string]]></code>
      <code><![CDATA[string]]></code>
    </LessSpecificReturnType>
    <PossiblyUnusedMethod>
      <code><![CDATA[generater]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/ClassLike/ClassGeneratorInterface.php">
    <UnusedClass>
      <code><![CDATA[ClassGeneratorInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Generator/ClassLike/EnumGeneratorInterface.php">
    <UnusedClass>
      <code><![CDATA[EnumGeneratorInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Generator/ClassLike/InterfaceGenerator.php">
    <LessSpecificReturnType>
      <code><![CDATA[array]]></code>
    </LessSpecificReturnType>
    <ParamNameMismatch>
      <code><![CDATA[$generator]]></code>
    </ParamNameMismatch>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->methods]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Generator/ClassLike/TraitGenerator.php">
    <ParamNameMismatch>
      <code><![CDATA[$classLikeGenerator]]></code>
    </ParamNameMismatch>
  </file>
  <file src="src/Generator/ClassLikeGeneratorInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[addAttribute]]></code>
      <code><![CDATA[addConstant]]></code>
      <code><![CDATA[addMethod]]></code>
      <code><![CDATA[addProperty]]></code>
      <code><![CDATA[addTraitUse]]></code>
      <code><![CDATA[addUse]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/ClassLikeMember/MethodGenerator.php">
    <InvalidMethodCall>
      <code><![CDATA[generate]]></code>
    </InvalidMethodCall>
    <MixedArgument>
      <code><![CDATA[$parameter->uses()]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$line]]></code>
      <code><![CDATA[$parameter]]></code>
      <code><![CDATA[$parameter]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[uses]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$line->generate()]]></code>
      <code><![CDATA[$parameter->generate()]]></code>
    </MixedOperand>
    <MixedReturnTypeCoercion>
      <code><![CDATA[$uses]]></code>
      <code><![CDATA[array]]></code>
    </MixedReturnTypeCoercion>
    <RedundantCondition>
      <code><![CDATA[$this->returnType !== null]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Generator/ClassLikeMember/PropertyGenerator.php">
    <MixedMethodCall>
      <code><![CDATA[name]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$this->value]]></code>
    </MixedOperand>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
    <UndefinedVariable>
      <code><![CDATA[$right]]></code>
    </UndefinedVariable>
  </file>
  <file src="src/Generator/ClassLikeMemberGeneratorInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[attributes]]></code>
      <code><![CDATA[uses]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/FileGenerator.php">
    <InvalidArgument>
      <code><![CDATA[$namespaces]]></code>
    </InvalidArgument>
    <LessSpecificReturnType>
      <code><![CDATA[int]]></code>
      <code><![CDATA[string]]></code>
    </LessSpecificReturnType>
    <MismatchingDocblockParamType>
      <code><![CDATA[NamespaceGeneratorInterface]]></code>
      <code><![CDATA[NamespaceGeneratorInterface]]></code>
    </MismatchingDocblockParamType>
    <MismatchingDocblockPropertyType>
      <code><![CDATA[NamespaceGeneratorInterface]]></code>
    </MismatchingDocblockPropertyType>
    <UndefinedInterfaceMethod>
      <code><![CDATA[$namespaces]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Generator/NamespaceGenerator.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$attributes]]></code>
      <code><![CDATA[$methods]]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code><![CDATA[$extends]]></code>
      <code><![CDATA[ClassLikeGeneratorInterface]]></code>
      <code><![CDATA[\usort(
            $classLikes,
            static fn (
                ClassLikeGeneratorInterface $left,
                ClassLikeGeneratorInterface $right
            ): int => $left->compare($right)
        )]]></code>
    </InvalidArgument>
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->classLikes]]></code>
    </InvalidPropertyAssignmentValue>
    <LessSpecificReturnType>
      <code><![CDATA[string]]></code>
    </LessSpecificReturnType>
    <MismatchingDocblockParamType>
      <code><![CDATA[UseGeneratorInterface]]></code>
    </MismatchingDocblockParamType>
    <MismatchingDocblockPropertyType>
      <code><![CDATA[UseGeneratorInterface]]></code>
    </MismatchingDocblockPropertyType>
    <MixedArgument>
      <code><![CDATA[$returnType]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$attributes]]></code>
    </MixedArgumentTypeCoercion>
    <MixedArrayOffset>
      <code><![CDATA[$uses[$use->name()]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code><![CDATA[$use]]></code>
      <code><![CDATA[$uses[$use->name()]]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[string]]></code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code><![CDATA[name]]></code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[\array_reduce(
            $classLikes,
            static fn (string $code, ClassLikeGeneratorInterface $classLikeGenerator): string => $code . $classLikeGenerator->generate() . self::NEWLINES,
            $code
        )]]></code>
    </MixedReturnStatement>
    <PossiblyUnusedMethod>
      <code><![CDATA[class]]></code>
      <code><![CDATA[classLikes]]></code>
      <code><![CDATA[usesClass]]></code>
      <code><![CDATA[usesConstant]]></code>
      <code><![CDATA[usesFunction]]></code>
    </PossiblyUnusedMethod>
    <RawObjectIteration>
      <code><![CDATA[$this->uses]]></code>
    </RawObjectIteration>
    <UndefinedInterfaceMethod>
      <code><![CDATA[$this->uses]]></code>
      <code><![CDATA[$this->uses]]></code>
      <code><![CDATA[$this->uses]]></code>
      <code><![CDATA[$this->uses]]></code>
      <code><![CDATA[$this->uses]]></code>
      <code><![CDATA[$this->uses]]></code>
    </UndefinedInterfaceMethod>
    <UnusedMethod>
      <code><![CDATA[method]]></code>
    </UnusedMethod>
    <UnusedVariable>
      <code><![CDATA[$name]]></code>
    </UnusedVariable>
  </file>
  <file src="src/Generator/ParameterGenerator.php">
    <PossiblyNullOperand>
      <code><![CDATA[$this->defaultValue]]></code>
    </PossiblyNullOperand>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
      <code><![CDATA[uses]]></code>
    </PossiblyUnusedMethod>
    <UnusedProperty>
      <code><![CDATA[$attributes]]></code>
      <code><![CDATA[$isOptional]]></code>
    </UnusedProperty>
  </file>
  <file src="src/Generator/StaticCallGenerator.php">
    <MixedArgument>
      <code><![CDATA[$arg]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$arg]]></code>
    </MixedAssignment>
    <MixedOperand>
      <code><![CDATA[$arg]]></code>
    </MixedOperand>
  </file>
  <file src="src/Generator/TestDataProviderGenerator.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/TestMethodGenerator.php">
    <MixedArgument>
      <code><![CDATA[$param]]></code>
      <code><![CDATA[$returnType]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$param]]></code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
    <UnusedParam>
      <code><![CDATA[$className]]></code>
    </UnusedParam>
  </file>
  <file src="src/Generator/Use/UseGeneratorInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[alias]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Middleware/MiddlewareProvider.php">
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->commandMiddlewares]]></code>
    </InvalidPropertyAssignmentValue>
    <LessSpecificReturnType>
      <code><![CDATA[MiddlewareInterface]]></code>
    </LessSpecificReturnType>
    <MissingOverrideAttribute>
      <code><![CDATA[public function get(CommandInterface $command): array]]></code>
    </MissingOverrideAttribute>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new RuntimeException(
                \sprintf('Command %s must implement %s', $command, CommandInterface::class),
            );]]></code>
      <code><![CDATA[throw new RuntimeException(
                \sprintf('Middleware %s must implement %s', $middleware, MiddlewareInterface::class),
            );]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
      <code><![CDATA[add]]></code>
    </PossiblyUnusedMethod>
    <TooManyArguments>
      <code><![CDATA[fn (string $middleware): MiddlewareInterface => $this->container->get($middleware)]]></code>
    </TooManyArguments>
  </file>
  <file src="src/Middleware/MiddlewareQueue.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[add]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/ClassConstantNameNormalizer.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/ClassMethodNameNormalizer.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/ClassNameNormalizer.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/TestDataProviderMethodNameNormalizer.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/TestMethodNameNormalizer.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Resolver/FileResolver.php">
    <MismatchingDocblockParamType>
      <code><![CDATA[PhpToken]]></code>
    </MismatchingDocblockParamType>
    <MixedAssignment>
      <code><![CDATA[$text]]></code>
      <code><![CDATA[$token]]></code>
      <code><![CDATA[$tokenId]]></code>
    </MixedAssignment>
    <MixedOperand>
      <code><![CDATA[$text]]></code>
    </MixedOperand>
    <MixedPropertyFetch>
      <code><![CDATA[$token->id]]></code>
      <code><![CDATA[$token->text]]></code>
    </MixedPropertyFetch>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
    <RawObjectIteration>
      <code><![CDATA[$tokens]]></code>
    </RawObjectIteration>
  </file>
  <file src="src/Resolver/TestMethodsResolver.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
    <UnevaluatedCode>
      <code><![CDATA[$assertTrue = new StaticCallGenerator('self', 'assertTrue', ['true']);]]></code>
      <code><![CDATA[$methods = [
            'setUp' => new MethodGenerator(
                name: 'setUp',
                returnType: 'void',
                body: [$staticCallGenerator],
                isProtected: true,
            ),
        ];]]></code>
      <code><![CDATA[$reflectionClass = new ReflectionClass($class);]]></code>
      <code><![CDATA[$staticCallGenerator = new StaticCallGenerator('self', 'markTestSkipped', ['Not implemented yet.']);]]></code>
      <code><![CDATA[foreach ($reflectionClass->getMethods(ReflectionMethod::IS_PUBLIC) as $method) {
            $testMethodName = $this->testMethodNameNormalizer->normalize($method->getName());

            $uses = [];
            $parameters = \array_map(
                static function (ReflectionParameter $reflectionParameter) use ($uses): ParameterGenerator {
                    $parameterType = $reflectionParameter->getType()?->__toString() ?? 'mixed';

                    $parameterTypes = \explode('|', $parameterType);
                    $types = [];
                    foreach ($parameterTypes as $parameterType) {
                        if (\str_starts_with($parameterType, '?')) {
                            $parameterType = \ltrim($parameterType, '?');
                        }

                        if (\str_contains($parameterType, '\\')) {
                            if (
                                \class_exists($parameterType)
                                || \interface_exists($parameterType)
                                || \trait_exists($parameterType)
                                || \enum_exists($parameterType)
                            ) {
                                $uses[$parameterType] = new UseClassGenerator($parameterType);
                            }

                            $parameterType = \mb_substr($parameterType, \mb_strrpos($parameterType, '\\') + 1);
                        }

                        $types[] = $parameterType;
                    }

                    return new ParameterGenerator(
                        name: $reflectionParameter->getName(),
                        type: \implode('|', $types),
                        isOptional: $reflectionParameter->isOptional(),
                        isVariadic: $reflectionParameter->isVariadic(),
                        isPassedByReference: $reflectionParameter->isPassedByReference(),
                        isDefaultValueAvailable: $reflectionParameter->isDefaultValueAvailable(),
                        uses: $uses,
                    );
                },
                $method->getParameters()
            );

            $attributes = [];
            $hasParameters = $parameters !== [];
            if ($hasParameters) {
                $dataProvider = $this->testDataProviderMethodNameNormalizer->normalize($testMethodName);

                $methods[$dataProvider] = new MethodGenerator(
                    $dataProvider,
                    'Generator',
                    [new UseClassGenerator(Generator::class), new UseClassGenerator(DataProvider::class)],
                    [],
                    [new TestDataProviderGenerator($testMethodName, $parameters)],
                    $attributes,
                    true,
                    false,
                    false,
                    true,
                    false,
                    false,
                );

                $attributes[] = new AttributeGenerator('DataProvider', [\sprintf("'%s'", $dataProvider)]);
            }

            $methods[$testMethodName] = new MethodGenerator(
                $testMethodName,
                'void',
                [],
                $parameters,
                [$assertTrue],
                $attributes,
                $method->isStatic(),
                $method->isFinal(),
                $method->isAbstract(),
                $method->isPublic(),
                $method->isProtected(),
                $method->isPrivate()
            );
        }]]></code>
      <code><![CDATA[return $methods;]]></code>
    </UnevaluatedCode>
    <UnusedParam>
      <code><![CDATA[$class]]></code>
    </UnusedParam>
    <UnusedProperty>
      <code><![CDATA[$testDataProviderMethodNameNormalizer]]></code>
      <code><![CDATA[$testMethodNameNormalizer]]></code>
    </UnusedProperty>
  </file>
  <file src="src/Runner/Runner.php">
    <MixedArgument>
      <code><![CDATA[$sourceDirectory]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$sourceDirectory]]></code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
    <UndefinedInterfaceMethod>
      <code><![CDATA[source]]></code>
      <code><![CDATA[tests]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Trait/ClassLikeGeneratorTrait.php">
    <ParamNameMismatch>
      <code><![CDATA[$classLikeGenerator]]></code>
    </ParamNameMismatch>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->attributes]]></code>
      <code><![CDATA[$this->constants]]></code>
      <code><![CDATA[$this->methods]]></code>
      <code><![CDATA[$this->properties]]></code>
      <code><![CDATA[$this->traitUses]]></code>
      <code><![CDATA[$this->uses]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Trait/UseGeneratorTrait.php">
    <ParamNameMismatch>
      <code><![CDATA[$useGenerator]]></code>
    </ParamNameMismatch>
  </file>
  <file src="src/Type/Alias/IterableTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[IterableTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Alias/MixedTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[MixedTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/ArrayTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[ArrayTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/CallableTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[CallableTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/ClassLike/ClassTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[ClassTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/ClassLike/EnumerationTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[EnumerationTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/ClassLike/InterfaceTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[InterfaceTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/NeverTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[NeverTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/NullTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[NullTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/ObjectTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[ObjectTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/RelativeClass/ParentClassTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[ParentClassTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/RelativeClass/SelfClassTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[SelfClassTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/RelativeClass/StaticClassTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[StaticClassTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/ResourceTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[ResourceTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/Scalar/BoolTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[BoolTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/Scalar/FloatTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[FloatTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/Scalar/IntTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[IntTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/Scalar/StringTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[StringTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/Value/FalseTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[FalseTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/Value/TrueTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[TrueTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Atomic/VoidTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[VoidTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Composite/IntersectionTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[IntersectionTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/Composite/UnionTypeInterface.php">
    <UnusedClass>
      <code><![CDATA[UnionTypeInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Type/CompositeTypeInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[types]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Type/TypeInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[toString]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Value/Argv.php">
    <MixedArgument>
      <code><![CDATA[$arguments]]></code>
    </MixedArgument>
    <PossiblyUnusedMethod>
      <code><![CDATA[get]]></code>
      <code><![CDATA[has]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Value/Workspace.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[dryRun]]></code>
      <code><![CDATA[force]]></code>
      <code><![CDATA[source]]></code>
      <code><![CDATA[tests]]></code>
    </PossiblyUnusedMethod>
  </file>
</files>
