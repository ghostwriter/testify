<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.25.0@01a8eb06b9e9cc6cfb6a320bf9fb14331919d505">
  <file src="src/Command/TestifyCommand.php">
    <LessSpecificReturnType>
      <code><![CDATA[int]]></code>
    </LessSpecificReturnType>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/FileResolver.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Filesystem.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[basename]]></code>
      <code><![CDATA[currentWorkingDirectory]]></code>
      <code><![CDATA[exists]]></code>
      <code><![CDATA[isFile]]></code>
      <code><![CDATA[isReadable]]></code>
      <code><![CDATA[read]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/ClassLike/ClassGenerator.php">
    <LessSpecificReturnType>
      <code><![CDATA[string]]></code>
      <code><![CDATA[string]]></code>
      <code><![CDATA[string]]></code>
      <code><![CDATA[string]]></code>
    </LessSpecificReturnType>
    <PossiblyUnusedMethod>
      <code><![CDATA[generater]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/ClassLike/InterfaceGenerator.php">
    <LessSpecificReturnType>
      <code><![CDATA[array]]></code>
    </LessSpecificReturnType>
    <ParamNameMismatch>
      <code><![CDATA[$generator]]></code>
    </ParamNameMismatch>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->methods]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Generator/ClassLike/TraitGenerator.php">
    <ParamNameMismatch>
      <code><![CDATA[$classLikeGenerator]]></code>
    </ParamNameMismatch>
  </file>
  <file src="src/Generator/ClassLikeMember/MethodGenerator.php">
    <InvalidMethodCall>
      <code><![CDATA[generate]]></code>
    </InvalidMethodCall>
    <MixedArgument>
      <code><![CDATA[$parameter->uses()]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$line]]></code>
      <code><![CDATA[$parameter]]></code>
      <code><![CDATA[$parameter]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[uses]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$line->generate()]]></code>
      <code><![CDATA[$parameter->generate()]]></code>
    </MixedOperand>
    <MixedReturnTypeCoercion>
      <code><![CDATA[$uses]]></code>
      <code><![CDATA[array]]></code>
    </MixedReturnTypeCoercion>
    <ParamNameMismatch>
      <code><![CDATA[$classLikeMemberGenerator]]></code>
    </ParamNameMismatch>
    <RedundantCondition>
      <code><![CDATA[$this->returnType !== null]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Generator/ClassLikeMember/PropertyGenerator.php">
    <MixedMethodCall>
      <code><![CDATA[name]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$this->value]]></code>
    </MixedOperand>
    <ParamNameMismatch>
      <code><![CDATA[$classLikeMemberGenerator]]></code>
    </ParamNameMismatch>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
    <UndefinedVariable>
      <code><![CDATA[$right]]></code>
    </UndefinedVariable>
  </file>
  <file src="src/Generator/FileGenerator.php">
    <LessSpecificReturnType>
      <code><![CDATA[int]]></code>
      <code><![CDATA[string]]></code>
    </LessSpecificReturnType>
  </file>
  <file src="src/Generator/NamespaceGenerator.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$attributes]]></code>
      <code><![CDATA[$methods]]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code><![CDATA[$extends]]></code>
      <code><![CDATA[ClassLikeGeneratorInterface]]></code>
      <code><![CDATA[usort(
            $classLikes,
            static fn (
                ClassLikeGeneratorInterface $left,
                ClassLikeGeneratorInterface $right
            ): int => $left->compare($right)
        )]]></code>
    </InvalidArgument>
    <InvalidMethodCall>
      <code><![CDATA[uses]]></code>
    </InvalidMethodCall>
    <InvalidPropertyAssignmentValue>
      <code><![CDATA[$this->classLikes]]></code>
    </InvalidPropertyAssignmentValue>
    <LessSpecificReturnType>
      <code><![CDATA[string]]></code>
    </LessSpecificReturnType>
    <MixedArgument>
      <code><![CDATA[$returnType]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$attributes]]></code>
    </MixedArgumentTypeCoercion>
    <MixedArrayOffset>
      <code><![CDATA[$uses[$use->name()]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code><![CDATA[$use]]></code>
      <code><![CDATA[$uses[$use->name()]]]></code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code><![CDATA[string]]></code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code><![CDATA[name]]></code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[array_reduce(
            $classLikes,
            static fn (string $code, ClassLikeGeneratorInterface $classLikeGenerator): string => $code . $classLikeGenerator->generate() . self::NEWLINES,
            $code
        )]]></code>
    </MixedReturnStatement>
    <PossiblyUnusedMethod>
      <code><![CDATA[class]]></code>
      <code><![CDATA[classLikes]]></code>
      <code><![CDATA[usesClass]]></code>
      <code><![CDATA[usesConstant]]></code>
      <code><![CDATA[usesFunction]]></code>
    </PossiblyUnusedMethod>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->uses]]></code>
      <code><![CDATA[$this->uses]]></code>
      <code><![CDATA[$this->uses]]></code>
    </PropertyTypeCoercion>
    <UnusedMethod>
      <code><![CDATA[method]]></code>
    </UnusedMethod>
    <UnusedVariable>
      <code><![CDATA[$name]]></code>
    </UnusedVariable>
  </file>
  <file src="src/Generator/ParameterGenerator.php">
    <PossiblyNullOperand>
      <code><![CDATA[$this->defaultValue]]></code>
    </PossiblyNullOperand>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
      <code><![CDATA[uses]]></code>
    </PossiblyUnusedMethod>
    <UnusedProperty>
      <code><![CDATA[$attributes]]></code>
      <code><![CDATA[$isOptional]]></code>
    </UnusedProperty>
  </file>
  <file src="src/Generator/StaticCallGenerator.php">
    <MixedArgument>
      <code><![CDATA[$arg]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$arg]]></code>
    </MixedAssignment>
    <MixedOperand>
      <code><![CDATA[$arg]]></code>
    </MixedOperand>
  </file>
  <file src="src/Generator/TestDataProviderGenerator.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/TestMethodGenerator.php">
    <MixedArgument>
      <code><![CDATA[$param]]></code>
      <code><![CDATA[$returnType]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$param]]></code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
    <UnusedParam>
      <code><![CDATA[$className]]></code>
    </UnusedParam>
  </file>
  <file src="src/Handler/NotFoundHandler.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Handler/TestifyCommandHandler.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Handlers.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[toArray]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Interface/CliPrinterInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[printThrowable]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Interface/Generator/ClassLike/ClassGeneratorInterface.php">
    <UnusedClass>
      <code><![CDATA[ClassGeneratorInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Interface/Generator/ClassLike/EnumGeneratorInterface.php">
    <UnusedClass>
      <code><![CDATA[EnumGeneratorInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Interface/Generator/ClassLikeGeneratorInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[addAttribute]]></code>
      <code><![CDATA[addConstant]]></code>
      <code><![CDATA[addMethod]]></code>
      <code><![CDATA[addProperty]]></code>
      <code><![CDATA[addTraitUse]]></code>
      <code><![CDATA[addUse]]></code>
      <code><![CDATA[uses]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Interface/Generator/ClassLikeMemberGeneratorInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[attributes]]></code>
      <code><![CDATA[uses]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Interface/Generator/UseGeneratorInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[alias]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Interface/NameGeneratorInterface.php">
    <UnusedClass>
      <code><![CDATA[NameGeneratorInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Middleware/ErrorHandlerMiddleware.php">
    <LessSpecificReturnType>
      <code><![CDATA[bool]]></code>
    </LessSpecificReturnType>
    <MixedArgument>
      <code><![CDATA[$this->cliPrinter->printException($throwable)]]></code>
    </MixedArgument>
    <PossiblyUnusedMethod>
      <code><![CDATA[new]]></code>
    </PossiblyUnusedMethod>
    <UndefinedInterfaceMethod>
      <code><![CDATA[printException]]></code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="src/Normalizer/ClassConstantNameNormalizer.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/ClassMethodNameNormalizer.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/ClassNameNormalizer.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/TestDataProviderMethodNameNormalizer.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/TestMethodNameNormalizer.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/PhpFileFinder.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Project.php">
    <PossiblyUnusedProperty>
      <code><![CDATA[$source]]></code>
      <code><![CDATA[$tests]]></code>
    </PossiblyUnusedProperty>
  </file>
  <file src="src/Runner.php">
    <MixedArgument>
      <code><![CDATA[$sourceDirectory]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[[$testsDirectory, 'Test.php']]]></code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code><![CDATA[$sourceDirectory]]></code>
      <code><![CDATA[$testsDirectory]]></code>
    </MixedAssignment>
    <NoInterfaceProperties>
      <code><![CDATA[$project->source]]></code>
      <code><![CDATA[$project->tests]]></code>
    </NoInterfaceProperties>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/TestBuilder.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$this->testMethodsResolver->resolve($namespaceClass)]]></code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code><![CDATA[[new AttributeGenerator('CoversClass', [$class . '::class'])]]]></code>
    </InvalidArgument>
    <InvalidOperand>
      <code><![CDATA[$namespace]]></code>
    </InvalidOperand>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new RuntimeException('Could not read file: ' . $file);]]></code>
    </MissingThrowsDocblock>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[$namespaces]]></code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAccess>
      <code><![CDATA[$namespaceGenerator]]></code>
      <code><![CDATA[$testNamespace]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code><![CDATA[$namespaces[$namespace]]]></code>
      <code><![CDATA[[$testNamespace, $namespaceGenerator]]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[classLikes]]></code>
      <code><![CDATA[usesClass]]></code>
      <code><![CDATA[usesClass]]></code>
      <code><![CDATA[usesClass]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$testNamespace]]></code>
    </MixedOperand>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/TestMethodsResolver.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
    <UnevaluatedCode>
      <code><![CDATA[$assertTrue = new StaticCallGenerator('self', 'assertTrue', ['true']);]]></code>
      <code><![CDATA[$methods = [
            'setUp' => new MethodGenerator('setUp', 'void', [], [], [
                $staticCallGenerator,
            ], [], false, false, false, true, false, false),
        ];]]></code>
      <code><![CDATA[$reflectionClass = new ReflectionClass($class);]]></code>
      <code><![CDATA[$staticCallGenerator = new StaticCallGenerator('self', 'markTestSkipped', ['Not implemented yet.']);]]></code>
      <code><![CDATA[foreach ($reflectionClass->getMethods(ReflectionMethod::IS_PUBLIC) as $method) {
            $testMethodName = $this->testMethodNameNormalizer->normalize($method->getName());

            $uses = [];
            $parameters = array_map(
                static function (ReflectionParameter $reflectionParameter) use ($uses): ParameterGenerator {
                    $parameterType = $reflectionParameter->getType()?->__toString() ?? 'mixed';

                    $parameterTypes = explode('|', $parameterType);
                    $types = [];
                    foreach ($parameterTypes as $parameterType) {
                        if (str_starts_with($parameterType, '?')) {
                            $parameterType = ltrim($parameterType, '?');
                        }

                        if (str_contains($parameterType, '\\')) {
                            if (
                                class_exists($parameterType)
                                || interface_exists($parameterType)
                                || trait_exists($parameterType)
                                || enum_exists($parameterType)
                            ) {
                                $uses[$parameterType] = new UseClassGenerator($parameterType);
                            }

                            $parameterType = mb_substr($parameterType, mb_strrpos($parameterType, '\\') + 1);
                        }

                        $types[] = $parameterType;
                    }

                    return new ParameterGenerator(
                        name: $reflectionParameter->getName(),
                        type: implode('|', $types),
                        isOptional: $reflectionParameter->isOptional(),
                        isVariadic: $reflectionParameter->isVariadic(),
                        isPassedByReference: $reflectionParameter->isPassedByReference(),
                        isDefaultValueAvailable: $reflectionParameter->isDefaultValueAvailable(),
                        uses: $uses,
                    );
                },
                $method->getParameters()
            );

            $attributes = [];
            $hasParameters = $parameters !== [];
            if ($hasParameters) {
                $dataProvider = $this->testDataProviderMethodNameNormalizer->normalize($testMethodName);

                $methods[$dataProvider] = new MethodGenerator(
                    $dataProvider,
                    'Generator',
                    [new UseClassGenerator(Generator::class), new UseClassGenerator(DataProvider::class)],
                    [],
                    [new TestDataProviderGenerator($testMethodName, $parameters)],
                    $attributes,
                    true,
                    false,
                    false,
                    true,
                    false,
                    false,
                );

                $attributes[] = new AttributeGenerator('DataProvider', [sprintf("'%s'", $dataProvider)]);
            }

            $methods[$testMethodName] = new MethodGenerator(
                $testMethodName,
                'void',
                [],
                $parameters,
                [$assertTrue],
                $attributes,
                $method->isStatic(),
                $method->isFinal(),
                $method->isAbstract(),
                $method->isPublic(),
                $method->isProtected(),
                $method->isPrivate()
            );
        }]]></code>
      <code><![CDATA[return $methods;]]></code>
    </UnevaluatedCode>
    <UnusedParam>
      <code><![CDATA[$class]]></code>
    </UnusedParam>
    <UnusedProperty>
      <code><![CDATA[$testDataProviderMethodNameNormalizer]]></code>
      <code><![CDATA[$testMethodNameNormalizer]]></code>
    </UnusedProperty>
  </file>
  <file src="src/Testify.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
      <code><![CDATA[new]]></code>
      <code><![CDATA[run]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Trait/ClassLikeGeneratorTrait.php">
    <InvalidReturnType>
      <code><![CDATA[list<DocBlockGeneratorInterface>]]></code>
    </InvalidReturnType>
    <ParamNameMismatch>
      <code><![CDATA[$classLikeGenerator]]></code>
    </ParamNameMismatch>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->attributes]]></code>
      <code><![CDATA[$this->constants]]></code>
      <code><![CDATA[$this->methods]]></code>
      <code><![CDATA[$this->properties]]></code>
      <code><![CDATA[$this->traitUses]]></code>
      <code><![CDATA[$this->uses]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Trait/UseGeneratorTrait.php">
    <ParamNameMismatch>
      <code><![CDATA[$useGenerator]]></code>
    </ParamNameMismatch>
  </file>
</files>
