<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.23.1@8471a896ccea3526b26d082f4461eeea467f10a4">
  <file src="src/Command/TestifyCommand.php">
    <MissingThrowsDocblock>
      <code><![CDATA[addArgument]]></code>
      <code><![CDATA[addArgument]]></code>
      <code><![CDATA[addOption]]></code>
      <code><![CDATA[addOption]]></code>
      <code><![CDATA[parent::__construct('Testify')]]></code>
      <code><![CDATA[setName]]></code>
    </MissingThrowsDocblock>
    <MixedArgument>
      <code><![CDATA[$file]]></code>
      <code><![CDATA[$testFile]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$file]]></code>
      <code><![CDATA[$testFile]]></code>
    </MixedAssignment>
    <MixedOperand>
      <code><![CDATA[$file]]></code>
      <code><![CDATA[$testFile]]></code>
    </MixedOperand>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/FileResolver.php">
    <LessSpecificReturnType>
      <code><![CDATA[Generator]]></code>
    </LessSpecificReturnType>
    <MixedAssignment>
      <code><![CDATA[$text]]></code>
      <code><![CDATA[$token]]></code>
      <code><![CDATA[$token]]></code>
      <code><![CDATA[$tokenId]]></code>
      <code><![CDATA[$tokenId]]></code>
    </MixedAssignment>
    <MixedOperand>
      <code><![CDATA[$text]]></code>
    </MixedOperand>
    <MixedPropertyFetch>
      <code><![CDATA[$token->id]]></code>
      <code><![CDATA[$token->text]]></code>
    </MixedPropertyFetch>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Filesystem.php">
    <MissingThrowsDocblock>
      <code><![CDATA[throw new FailedToCreateDirectoryException($path);]]></code>
      <code><![CDATA[throw new FailedToDetermineCurrentWorkingDirectoryException();]]></code>
      <code><![CDATA[throw new FailedToReadFileException($path);]]></code>
      <code><![CDATA[throw new FailedToWriteFileException($path);]]></code>
      <code><![CDATA[throw new FileNotFoundException($path);]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedMethod>
      <code><![CDATA[basename]]></code>
      <code><![CDATA[currentWorkingDirectory]]></code>
      <code><![CDATA[exists]]></code>
      <code><![CDATA[isFile]]></code>
      <code><![CDATA[isReadable]]></code>
      <code><![CDATA[parentDirectory]]></code>
      <code><![CDATA[read]]></code>
      <code><![CDATA[recursiveDirectoryIterator]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Formatter/TestDataProviderMethodNameFormatter.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function format(string $name): string]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="src/Formatter/TestMethodNameFormatter.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function format(string $name): string]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="src/Generator/AttributeGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function generate(): string]]></code>
    </MissingOverrideAttribute>
    <MixedAssignment>
      <code><![CDATA[$param]]></code>
    </MixedAssignment>
    <MixedOperand>
      <code><![CDATA[$param]]></code>
    </MixedOperand>
  </file>
  <file src="src/Generator/ClassGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function compare(ClassLikeGeneratorInterface $other): int]]></code>
      <code><![CDATA[public function generate(): string]]></code>
      <code><![CDATA[public function name(): string]]></code>
      <code><![CDATA[public function uses(): array]]></code>
    </MissingOverrideAttribute>
    <MixedArgument>
      <code><![CDATA[$method->uses()]]></code>
      <code><![CDATA[$property->uses()]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[usort(
            $this->constants,
            static fn (
                ConstantGeneratorInterface $left,
                ConstantGeneratorInterface $right
            ): int => $left->compare($right)
        )]]></code>
      <code><![CDATA[usort(
            $this->methods,
            static fn (
                MethodGeneratorInterface $left,
                MethodGeneratorInterface $right
            ): int => $left->compare($right)
        )]]></code>
      <code><![CDATA[usort(
            $this->properties,
            static fn (
                PropertyGeneratorInterface $left,
                PropertyGeneratorInterface $right
            ): int => $left->compare($right)
        )]]></code>
      <code><![CDATA[usort(
            $this->traitUses,
            static fn (
                TraitUseGeneratorInterface $left,
                TraitUseGeneratorInterface $right
            ): int => $left->compare($right)
        )]]></code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code><![CDATA[$attribute]]></code>
      <code><![CDATA[$constant]]></code>
      <code><![CDATA[$dockBlock]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$method]]></code>
      <code><![CDATA[$property]]></code>
      <code><![CDATA[$property]]></code>
      <code><![CDATA[$traitUse]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[uses]]></code>
      <code><![CDATA[uses]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$attribute->generate()]]></code>
      <code><![CDATA[$constant->generate()]]></code>
      <code><![CDATA[$dockBlock->generate()]]></code>
      <code><![CDATA[$method->generate()]]></code>
      <code><![CDATA[$property->generate()]]></code>
      <code><![CDATA[$traitUse->generate()]]></code>
    </MixedOperand>
  </file>
  <file src="src/Generator/DeclareStrictTypesGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function generate(): string]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="src/Generator/FileGenerator.php">
    <InvalidArrayOffset>
      <code><![CDATA[$this->namespaces[DeclareStrictTypesGeneratorInterface::class]]]></code>
    </InvalidArrayOffset>
    <MissingOverrideAttribute>
      <code><![CDATA[public function generate(): string]]></code>
    </MissingOverrideAttribute>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->namespaces]]></code>
    </PropertyTypeCoercion>
  </file>
  <file src="src/Generator/InterfaceGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function compare(ClassLikeGeneratorInterface $other): int]]></code>
      <code><![CDATA[public function generate(): string]]></code>
      <code><![CDATA[public function name(): string]]></code>
      <code><![CDATA[public function uses(): array]]></code>
    </MissingOverrideAttribute>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
      <code><![CDATA[addMethod]]></code>
    </PossiblyUnusedMethod>
    <UndefinedClass>
      <code><![CDATA[GeneratorInterface]]></code>
    </UndefinedClass>
    <UnusedParam>
      <code><![CDATA[$method]]></code>
    </UnusedParam>
  </file>
  <file src="src/Generator/InterfaceNameGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function generate(): string]]></code>
      <code><![CDATA[public function name(): string]]></code>
    </MissingOverrideAttribute>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/MethodGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function compare(ClassLikeMemberGeneratorInterface $right): int]]></code>
      <code><![CDATA[public function generate(): string]]></code>
      <code><![CDATA[public function name(): string]]></code>
    </MissingOverrideAttribute>
    <MixedArgument>
      <code><![CDATA[$parameter->uses()]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$attribute]]></code>
      <code><![CDATA[$line]]></code>
      <code><![CDATA[$parameter]]></code>
      <code><![CDATA[$parameter]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[uses]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$attribute->generate()]]></code>
      <code><![CDATA[$line->generate()]]></code>
      <code><![CDATA[$parameter->generate()]]></code>
    </MixedOperand>
    <PossiblyUnusedMethod>
      <code><![CDATA[uses]]></code>
    </PossiblyUnusedMethod>
    <RedundantCondition>
      <code><![CDATA[$this->returnType !== null]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Generator/NamespaceGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function generate(): string]]></code>
      <code><![CDATA[public function name(): string]]></code>
    </MissingOverrideAttribute>
    <MixedArgument>
      <code><![CDATA[$returnType]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[usort(
            $this->classLikes,
            static fn (
                ClassLikeGeneratorInterface $left,
                ClassLikeGeneratorInterface $right
            ): int => $left->compare($right)
        )]]></code>
      <code><![CDATA[usort(
            $uses,
            static fn (
                UseGeneratorInterface $left,
                UseGeneratorInterface $right
            ): int => $left->compare($right)
        )]]></code>
    </MixedArgumentTypeCoercion>
    <MixedArrayAssignment>
      <code><![CDATA[$this->classLikes[ClassGenerator::class][$name]]]></code>
    </MixedArrayAssignment>
    <MixedArrayOffset>
      <code><![CDATA[$uses[$use->name()]]]></code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code><![CDATA[$class]]></code>
      <code><![CDATA[$classLike]]></code>
      <code><![CDATA[$use]]></code>
      <code><![CDATA[$use]]></code>
      <code><![CDATA[$uses[$use->name()]]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[generate]]></code>
      <code><![CDATA[name]]></code>
      <code><![CDATA[uses]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$class->generate()]]></code>
      <code><![CDATA[$use->generate()]]></code>
    </MixedOperand>
    <PossiblyUnusedMethod>
      <code><![CDATA[class]]></code>
      <code><![CDATA[classLikes]]></code>
      <code><![CDATA[usesClass]]></code>
      <code><![CDATA[usesConstant]]></code>
      <code><![CDATA[usesFunction]]></code>
    </PossiblyUnusedMethod>
    <PropertyTypeCoercion>
      <code><![CDATA[$this->uses]]></code>
      <code><![CDATA[$this->uses]]></code>
      <code><![CDATA[$this->uses]]></code>
    </PropertyTypeCoercion>
    <UnusedMethod>
      <code><![CDATA[method]]></code>
    </UnusedMethod>
  </file>
  <file src="src/Generator/ParameterGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function generate(): string]]></code>
    </MissingOverrideAttribute>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
      <code><![CDATA[uses]]></code>
    </PossiblyUnusedMethod>
    <UnusedProperty>
      <code><![CDATA[$attributes]]></code>
      <code><![CDATA[$defaultValue]]></code>
      <code><![CDATA[$isDefaultValueAvailable]]></code>
      <code><![CDATA[$isOptional]]></code>
    </UnusedProperty>
  </file>
  <file src="src/Generator/PropertyGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function compare(ClassLikeMemberGeneratorInterface $right): int]]></code>
      <code><![CDATA[public function generate(): string]]></code>
      <code><![CDATA[public function name(): string]]></code>
    </MissingOverrideAttribute>
    <MixedOperand>
      <code><![CDATA[$this->value]]></code>
    </MixedOperand>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/StaticCallGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function generate(): string]]></code>
    </MissingOverrideAttribute>
    <MixedArgument>
      <code><![CDATA[$arg]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$arg]]></code>
    </MixedAssignment>
  </file>
  <file src="src/Generator/TestDataProviderGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function generate(): string]]></code>
    </MissingOverrideAttribute>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/TestMethodGenerator.php">
    <MixedArgument>
      <code><![CDATA[$param]]></code>
      <code><![CDATA[$returnType]]></code>
    </MixedArgument>
    <MixedAssignment>
      <code><![CDATA[$param]]></code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
    <UnusedParam>
      <code><![CDATA[$className]]></code>
    </UnusedParam>
  </file>
  <file src="src/Generator/TraitGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function compare(ClassLikeGeneratorInterface $other): int]]></code>
      <code><![CDATA[public function generate(): string]]></code>
      <code><![CDATA[public function name(): string]]></code>
      <code><![CDATA[public function uses(): array]]></code>
    </MissingOverrideAttribute>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Generator/UseClassGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function generate(): string]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="src/Generator/UseConstantGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function generate(): string]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="src/Generator/UseFunctionGenerator.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function generate(): string]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="src/Generator/UseGeneratorTrait.php">
    <MissingOverrideAttribute>
      <code><![CDATA[final public function alias(): string]]></code>
      <code><![CDATA[final public function compare(UseGeneratorInterface $generator): int]]></code>
      <code><![CDATA[final public function name(): string]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="src/Interface/Generator/ClassLike/ClassGeneratorInterface.php">
    <UnusedClass>
      <code><![CDATA[ClassGeneratorInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Interface/Generator/ClassLike/EnumGeneratorInterface.php">
    <UnusedClass>
      <code><![CDATA[EnumGeneratorInterface]]></code>
    </UnusedClass>
  </file>
  <file src="src/Interface/Generator/ClassLikeGeneratorInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[uses]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Interface/Generator/NameGeneratorInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[name]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Interface/Generator/UseGeneratorInterface.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[alias]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/ClassConstantNameNormalizer.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function normalize(string $name): string]]></code>
    </MissingOverrideAttribute>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/ClassMethodNameNormalizer.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function normalize(string $name): string]]></code>
    </MissingOverrideAttribute>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/ClassNameNormalizer.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function normalize(string $name): string]]></code>
    </MissingOverrideAttribute>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/TestDataProviderMethodNameNormalizer.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function normalize(string $name): string]]></code>
    </MissingOverrideAttribute>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Normalizer/TestMethodNameNormalizer.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function normalize(string $name): string]]></code>
    </MissingOverrideAttribute>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/PhpFileFinder.php">
    <LessSpecificReturnType>
      <code><![CDATA[Generator]]></code>
    </LessSpecificReturnType>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
    <UnusedProperty>
      <code><![CDATA[$filesystem]]></code>
    </UnusedProperty>
  </file>
  <file src="src/Printer.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function print(GeneratorInterface $generator): string]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="src/Project.php">
    <MissingThrowsDocblock>
      <code><![CDATA[getArgument]]></code>
      <code><![CDATA[getArgument]]></code>
      <code><![CDATA[getOption]]></code>
      <code><![CDATA[getOption]]></code>
      <code><![CDATA[throw new FailedToCreateDirectoryException($testsUnitDirectory);]]></code>
      <code><![CDATA[throw new PathDoesNotExistException($source);]]></code>
      <code><![CDATA[throw new PathDoesNotExistException($tests);]]></code>
      <code><![CDATA[throw new PathIsEmptyException();]]></code>
      <code><![CDATA[throw new PathIsEmptyException();]]></code>
      <code><![CDATA[throw new PathIsNotDirectoryException($source);]]></code>
      <code><![CDATA[throw new PathIsNotStringException();]]></code>
      <code><![CDATA[throw new PathIsNotStringException();]]></code>
    </MissingThrowsDocblock>
    <PossiblyUnusedProperty>
      <code><![CDATA[$source]]></code>
      <code><![CDATA[$tests]]></code>
    </PossiblyUnusedProperty>
  </file>
  <file src="src/Runner.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function run(ProjectInterface $project): Generator]]></code>
    </MissingOverrideAttribute>
    <MixedArgument>
      <code><![CDATA[$sourceDirectory]]></code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code><![CDATA[[$testsDirectory, 'Test.php']]]></code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code><![CDATA[$sourceDirectory]]></code>
      <code><![CDATA[$testsDirectory]]></code>
    </MixedAssignment>
    <NoInterfaceProperties>
      <code><![CDATA[$project->source]]></code>
      <code><![CDATA[$project->tests]]></code>
    </NoInterfaceProperties>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/ServiceProvider.php">
    <MissingOverrideAttribute>
      <code><![CDATA[public function __invoke(ContainerInterface $container): void]]></code>
    </MissingOverrideAttribute>
  </file>
  <file src="src/TestBuilder.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$namespaces]]></code>
    </ArgumentTypeCoercion>
    <InvalidOperand>
      <code><![CDATA[$namespace]]></code>
      <code><![CDATA[$namespace]]></code>
    </InvalidOperand>
    <MissingOverrideAttribute>
      <code><![CDATA[public function build(string $file, string $testFile): GeneratorInterface]]></code>
    </MissingOverrideAttribute>
    <MissingThrowsDocblock>
      <code><![CDATA[throw new RuntimeException('Could not read file: ' . $file);]]></code>
    </MissingThrowsDocblock>
    <MixedArrayAccess>
      <code><![CDATA[$namespaceGenerator]]></code>
      <code><![CDATA[$testNamespace]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code><![CDATA[$namespaces[$namespace]]]></code>
      <code><![CDATA[[$testNamespace, $namespaceGenerator]]]></code>
    </MixedAssignment>
    <MixedMethodCall>
      <code><![CDATA[classLikes]]></code>
      <code><![CDATA[usesClass]]></code>
      <code><![CDATA[usesClass]]></code>
      <code><![CDATA[usesClass]]></code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$testNamespace]]></code>
    </MixedOperand>
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/TestMethodsResolver.php">
    <PossiblyUnusedMethod>
      <code><![CDATA[__construct]]></code>
    </PossiblyUnusedMethod>
    <UnevaluatedCode>
      <code><![CDATA[$assertTrue = new StaticCallGenerator('self', 'assertTrue', ['true']);]]></code>
      <code><![CDATA[$methods = [
            'setUp' => new MethodGenerator('setUp', 'void', [], [], [
                $staticCallGenerator,
            ], [], false, false, false, true, false, false),
        ];]]></code>
      <code><![CDATA[$reflectionClass = new ReflectionClass($class);]]></code>
      <code><![CDATA[$staticCallGenerator = new StaticCallGenerator('self', 'markTestSkipped', ['Not implemented yet.']);]]></code>
      <code><![CDATA[foreach ($reflectionClass->getMethods(ReflectionMethod::IS_PUBLIC) as $method) {
            $testMethodName = $this->testMethodNameNormalizer->normalize($method->getName());

            $uses = [];
            $parameters = array_map(
                static function (ReflectionParameter $parameter) use ($uses): ParameterGenerator {
                    $parameterType = $parameter->getType()?->__toString() ?? 'mixed';

                    $parameterTypes = explode('|', $parameterType);
                    $types = [];
                    foreach ($parameterTypes as $type) {
                        if (str_starts_with($type, '?')) {
                            $type = ltrim($type, '?');
                        }

                        if (str_contains($type, '\\')) {
                            if (
                                class_exists($type)
                                || interface_exists($type)
                                || trait_exists($type)
                                || enum_exists($type)
                            ) {
                                $uses[$type] = new UseClassGenerator($type);
                            }

                            $type = mb_substr($type, mb_strrpos($type, '\\') + 1);
                        }

                        $types[] = $type;
                    }

                    return new ParameterGenerator(
                        name: $parameter->getName(),
                        type: implode('|', $types),
                        isOptional: $parameter->isOptional(),
                        isVariadic: $parameter->isVariadic(),
                        isPassedByReference: $parameter->isPassedByReference(),
                        isDefaultValueAvailable: $parameter->isDefaultValueAvailable(),
                        uses: $uses,
                    );
                },
                $method->getParameters()
            );

            $attributes = [];
            $hasParameters = $parameters !== [];
            if ($hasParameters) {
                $dataProvider = $this->testDataProviderMethodNameNormalizer->normalize($testMethodName);

                $methods[$dataProvider] = new MethodGenerator(
                    $dataProvider,
                    'Generator',
                    [new UseClassGenerator(Generator::class), new UseClassGenerator(DataProvider::class)],
                    [],
                    [new TestDataProviderGenerator($testMethodName, $parameters)],
                    $attributes,
                    true,
                    false,
                    false,
                    true,
                    false,
                    false,
                );

                $attributes[] = new AttributeGenerator('DataProvider', [sprintf("'%s'", $dataProvider)]);
            }

            $methods[$testMethodName] = new MethodGenerator(
                $testMethodName,
                'void',
                [],
                $parameters,
                [$assertTrue],
                $attributes,
                $method->isStatic(),
                $method->isFinal(),
                $method->isAbstract(),
                $method->isPublic(),
                $method->isProtected(),
                $method->isPrivate()
            );
        }]]></code>
      <code><![CDATA[return $methods;]]></code>
    </UnevaluatedCode>
    <UnusedParam>
      <code><![CDATA[$class]]></code>
    </UnusedParam>
    <UnusedProperty>
      <code><![CDATA[$testDataProviderMethodNameNormalizer]]></code>
      <code><![CDATA[$testMethodNameNormalizer]]></code>
    </UnusedProperty>
  </file>
  <file src="src/TestNamespaceResolver.php">
    <PossiblyUndefinedIntArrayOffset>
      <code><![CDATA[$namespaces[1]]]></code>
    </PossiblyUndefinedIntArrayOffset>
  </file>
</files>
